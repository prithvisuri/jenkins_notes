##docker## 
==========
yum install docker 
service docker start
sudo usermod -a -G docker ec2-user

docker version
docker --version
docker info
docker --info
docker
================================================================================
docker-compose(docker hub)
--------------
sudo curl -L "https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version
================================================================================
docker search
-------------
docker search tomcat(to search the image dockerhub)
================================================================================
docker pull, docker push 
-------------------------	
docker pull tomcat:latest   (to download the image dockerhub)
docker push <image id>      (log in to your dockerhub first)	
================================================================================
docker images
-------------
docker images  (to check the image downloaded)(only read)
================================================================================
docker containers
-----------------
docker ps          (to see only running containers)
docker ps -a       (to see all running containers and stopped containers)
docker ps --all    (to see the all the container sever created)
docker container ls

container name
--------------
-- name <give name> <container image name>
docker run --name prithvi-nginx -d -p 80:80 nginx
docker run --name proxyserver -d -p 80:80 nginx
docker run --name webserver -d -p 8080:80 httpd
docker container run -it --name tomcat1 tomcat bash <<to get into the container>>
================================================================================
docker create
-------------
docker create hello-world
================================================================================
docker start
------------
docker start <container-id>    (no output shown)
docker start -a <id>           (-a attached)(shows output)
================================================================================
docker stop
-----------
docker stop <cont id>  (will give time for the process to stop)
================================================================================
remove container
----------------
docker rm <container-id>
docker rm -f <container-id> (remove forcefully)
================================================================================
docker kill
-----------
docker kill <cont id> (will not give time for the process to stop)
================================================================================
running processes
-----------------
docker top <container-id>
================================================================================
how mant processes running in host machine
--------------------------------------------
ps aux
ps aux | grep nginx
================================================================================
docker logs
----------
docker logs <container-id>  (to get the output)
docker container logs mysqldb eelohngaiTei1veeLaedoh8ahkaekah9
================================================================================
docker system prune
--------------------
docker system prune  (to remove all containers)
================================================================================
docker run
----------
docker run= docker create container + docker start container
docker run <image name>
docker run busybox echo hi there
docker run busybox ls
docker run busybox ping google.com (keeps up and running)>>docker ps

docker run --name tomcat-container -p 8080:8080 tomcat:latest
docker run -it --name <container_Name> <image_name>:<image_version/tag>
docker run --name tomcat-container(giving container name) -p 8080(external port):8080(internal port) tomcat:latest(from the image)
kill=ctrl+c

**to run a docker images in detached mode
docker -d run --name romcat-container -p 8080:8080 tomcat:latest
docker run -d --name <container_Name> <image_name>:<image_version/tag>

docker container run --publish 80:80 nginx
docker container run --publish 80:80 --detach nginx
docker container run --publish 80:80 --detach --name webhost nginx
docker container run --publish 8081:80 --detach --name webhost nginx
docker container run -d -p 8081:80 image-name --name webhost-nginx
in browser past the ip add.
================================================================================
exec
----
this command is used when the container is up and running and used when a command has to be given

-it
---
-it(input, output in termenal)
-i (accept input standred)
-t (shoe the output in terminal)

docker run redis
docker exec -it redis-id redis-cli (single comanda exec)-it(input, output in termenal)
docker exec -it container-id sh (SH lets inside access of the container in shell)
docker run -it image-name sh
================================================================================
docker container inspect
------------------------
docker container inspect <container-id>
================================================================================
docker container stats
-----------------------
docker container stats <container-id>
================================================================================
docker network 
--------------
docker network ls
docker network -f driver=bridge
docker container inspect <container-id>
docker network inspect <network-id>
docker network create <name of the network>
docker network create driver=bridge

docker nwtwork ls --format "{{.ID}}:{{.Driver}}"

docker container run -d -p 80808:80 --name my-nginx --network my-network nginx (to start a container with own network)
docker network connect <network-nmae> <container-id> (fo connecting a running container to a network)
docker network dissconnect <network-nmae> <container-id> (fo disconnecting a running container to a network)
docker exec -it <container-id> ping <container-id> (to check the connectivity of the container in same network)
================================================================================
image layers
------------
docker history <container-id>
================================================================================
image tag
---------
docker image build tag tomcat prithvisuri/tomcat
docker image build tag tomcat:prtihvi

docker image build -t <name-image>:<tag> /root/prithvi-docker<path>
docker run -d -p 8080:80 <inage-name>:<tag>

================================================================================
docker volumes
---------------
docker volumes ls

docker volume ls
docker volume create myvolume-1
docker inspect myvolume-1 
docker volume rm myvolume-1 
docker volume prune(remove all volumes)

for wsl
-------
sudo ls /mnt/wsl/docker-desktop-data/data/docker/volume(in windows --volumes location)
\\wsl$\docker-desktop-data\mnt\wsl\docker-desktop-data\data\docker\volumes


docker run -d --name my-nginx -v my-volume:/usr/share/nginx/html nginx
docker run -d --name mysql-test -e MYSQL_ROOT_PASSWORD=mypassword mysql:latest
docker run -d --name mysql-test -e "MYSQL_ROOT_PASSWORD=mypassword" --mount type=volume,source=mysql-db,destination=/var/lib/mysql mysql
docekr exec -it mysql-test bash
apt-get install mysql-client -y
mysql -u root -p mypassword -h 172.17.0.2 -P 3306

create db in mysql
------------------
create database prithvi_db;
CREATE TABLE Persons ( PersonID int, LastName varchar(255), FirstName varchar(255), Address varchar(255), City varchar(255) );
INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)VALUES (14, 'B. Erichsen', ’Tom’, ‘Skagen 216’, 'Norway');
INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)VALUES (17, 'Zbyszek', ’Wolski’, ‘Keskuskatu 45’, ‘Finland'); 

bind mount
----------
docker run -d -p 80:80 --name nginx-bind --mount type=bind,src="$(pwd)",target=/usr/share/nginx/html nginx

--------------
Connect to MySQL from the MySQL command line client
docker run -it --network some-network --rm mysql mysql -hsome-mysql -uexample-user -p
docker run -it --rm mysql-client mysql -h 172.17.0.2 -p 3306
<<docker logs <container-id> for mysqldb passpwod>>
================================================================================
dockerfile
----------
docker build -t prithvi/prithvi .
docker run -d -p 8080:8080 --name prithvisuri nginx

================================================================================
docker-compose
--------------
version: '3' #Version of YML file

services:
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: mypassword
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpressuser
      MYSQL_PASSWORD: wordpress

  wordpress:
    depend-on:
      - db
    image: wordpress:latest
    ports:
      - "8080:80"
    restart: always
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpressuser
      WORDPRESS_DB_PASSWORD: wordpress

volumes:
  db_data:
================================================================================
docker swarm
------------

docekr info | grep -i swarm >> to check its active or inactive

docker swarm init>> Swarm initialized: current node (zhi8a4e3n8nlev7c8h79v3bgc) is now a manager.
docker swarm join --token SWMTKN-1-0pebs9ziqc93lgs9qjyi1w2rk3l1romiodrifmsyv3dv1dqu68-7mt8836vpsrbtislfk3np2r3n 192.168.65.3:2377 >> (past it in the nodes)
docker swarm leave --force
docker node ls

docker service create -p 80:80 --name web nginx
docker service create --replicas=4 -p 80:80 --name web nginx
docker service create -p 80:80 --name --mode=globle web nginx
docker service update --image nginx:1.17.0 web
docker service update --rollback web
docker service update --update-failure-action=rollback web
docker service scale web=3
docker service ls
docker service ps web
docekr service inspect <node-id> |grep containerID
docekr service inspect --pretty webhost-nginx
docker service rm web >> delet the swarm

docker node promote <ip-add of the node> to make it reachable
docker node update --availability drain <node-ip> to make it unreachable (for master) (no containers in the mechine)


swarm compose file
-------------------

version: "3"

service: 
    nginx-image:
        image: nginx
        port:
            - 80:90
        volumes:
            - /tmp/:/usr/share/nginx/html
        deploy:
            mode:replicated
            replicas: 2
		configs:
		   - src: sample.conf
		   target: /tmp/sample.conf
		   mode: 0755
		configs:
		  sample.conf:
		  external: true

docker stack deploy -c docker-compose.yml web

docker stack ls

docker stack ps

docker stack service <stackname>
docker stack rm <stackname>

docker config create test-config sample.conf
docker config ls
docker service create -p 80:80 --name web --config src-test-config,target=/tmp/sample.conf nginx

================================================================================
docker commit contianer-id prithvisuri/test-image (to create a image from container)

docker pull jenkins 
docker run --name myjenkins -v myvolume-1:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins

docker run --name my-jenkins-1 -v volume-1:/var/jenkins_home -p 9090:8080 -p 60000:50000 jenkins
c28dd20329e9486491f7c28a289bfb7a

docker run --name my-jenkins-1 -v /root/new-folder:/var/jenkins_home -p 9090:8080 -p 60000:50000 jenkins (sudo chown -R 1000:1000)

docker run -it alpine sh
apk add --update redis
new terminal: docker commit -c 'CMD ["redis-server"]' 4e8188893ee0

 


